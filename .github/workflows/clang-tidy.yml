name: Clang-Tidy

on:
  push:
    paths:
      - 'src/**'
      - 'include/**'
      - '.github/workflows/clang-tidy.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'include/**'

jobs:
  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y clang-tidy gcc-multilib

      - name: Generate compile commands
        run: |
          pip install platformio
          pio project init --project-option "board=esp32-c3-devkitm-1" || true
          pio run -e esp32-c3-devkitm-1 -t compiledb

      - name: Run clang-tidy (src + include)
        run: |
          echo 'Running clang-tidy with configured checks...'
          FILES=$(git ls-files '*.cpp' '*.c' '*.hpp' '*.h' | tr '\n' ' ')
          # Use compile commands generated by PlatformIO (in .pio/build/*/compile_commands.json)
          # Try first esp32-c3-devkitm-1 environment; fallback to project root.
          BUILD_DB=$(find .pio/build -maxdepth 2 -name compile_commands.json | head -n1 || true)
          if [ -z "$BUILD_DB" ]; then
            echo 'No compile_commands.json found; clang-tidy may have reduced accuracy.'
            clang-tidy $FILES > clang-tidy.log 2>&1 || true
          else
            echo "Using compile commands: $BUILD_DB"
            clang-tidy $FILES -p $(dirname "$BUILD_DB") > clang-tidy.log 2>&1 || true
          fi
          echo '=== clang-tidy summary (first 200 lines) ==='
          head -n 200 clang-tidy.log || true

      - name: Compare with baseline (if exists)
        run: |
          BASE=.clang-tidy-baseline.txt
          CUR_WARN=$(grep -E 'warning:|error:' clang-tidy.log | wc -l || true)
          if [ -f "$BASE" ]; then
            OLD_WARN=$(cat $BASE)
            echo "Previous warnings: $OLD_WARN"; echo "Current warnings: $CUR_WARN"
            if [ "$CUR_WARN" -gt "$OLD_WARN" ]; then
              echo 'New warnings introduced (non-blocking for now).'
            fi
          else
            echo $CUR_WARN > $BASE
            echo "Baseline created with $CUR_WARN warnings"
          fi
          # Always upload updated baseline as artifact for review
          cp $BASE updated-clang-tidy-baseline.txt

      - name: Upload log artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang-tidy-log
          path: clang-tidy.log
      - name: Upload baseline artifact
        uses: actions/upload-artifact@v4
        with:
          name: clang-tidy-baseline
          path: updated-clang-tidy-baseline.txt

      - name: Summary (non-blocking)
        run: |
          WARN=$(grep -E 'warning:|error:' clang-tidy.log | wc -l || true)
            echo "clang-tidy total diagnostics: $WARN (non-blocking)"
